ANFIS: 2 inputs, 1 outputs, 121 test cases
Status = trainHybridJangOffLine
Architecture: 2 (4 x 4) - 16 - 48 - (48 x 1) - 1
Last training error: 1.0879925169213784

Input variable x0:
        mf0: sbellmf(a=4.096336, b=1.424759, c=-9.859497)
        mf1: sbellmf(a=3.599561, b=1.027690, c=-4.177343)
        mf2: sbellmf(a=3.599561, b=1.027690, c=4.177343)
        mf3: sbellmf(a=4.096336, b=1.424759, c=9.859497)
Input variable x1:
        mf0: sbellmf(a=4.096336, b=1.424759, c=-9.859497)
        mf1: sbellmf(a=3.599561, b=1.027690, c=-4.177343)
        mf2: sbellmf(a=3.599561, b=1.027690, c=4.177343)
        mf3: sbellmf(a=4.096336, b=1.424759, c=9.859497)
Rules:
  0: IF x0 is mf0 and x1 is mf0 THEN y0 = -0.05 x0 -0.05 x1 -1.40
  1: IF x0 is mf0 and x1 is mf1 THEN y0 = -0.05 x0 -1.40 x1 +0.11
  2: IF x0 is mf0 and x1 is mf2 THEN y0 = -1.40 x0 +0.11 x1 -0.10
  3: IF x0 is mf0 and x1 is mf3 THEN y0 = +0.11 x0 -0.10 x1 +1.29
  4: IF x0 is mf1 and x1 is mf0 THEN y0 = -0.10 x0 +1.29 x1 +0.11
  5: IF x0 is mf1 and x1 is mf1 THEN y0 = +1.29 x0 +0.11 x1 +0.10
  6: IF x0 is mf1 and x1 is mf2 THEN y0 = +0.11 x0 +0.10 x1 +1.29
  7: IF x0 is mf1 and x1 is mf3 THEN y0 = +0.10 x0 +1.29 x1 -0.05
  8: IF x0 is mf2 and x1 is mf0 THEN y0 = +1.29 x0 -0.05 x1 +0.05
  9: IF x0 is mf2 and x1 is mf1 THEN y0 = -0.05 x0 +0.05 x1 -1.40
 10: IF x0 is mf2 and x1 is mf2 THEN y0 = +0.05 x0 -1.40 x1 -0.10
 11: IF x0 is mf2 and x1 is mf3 THEN y0 = -1.40 x0 -0.10 x1 +0.11
 12: IF x0 is mf3 and x1 is mf0 THEN y0 = -0.10 x0 +0.11 x1 +1.29
 13: IF x0 is mf3 and x1 is mf1 THEN y0 = +0.11 x0 +1.29 x1 +0.17
 14: IF x0 is mf3 and x1 is mf2 THEN y0 = +1.29 x0 +0.17 x1 +0.17
 15: IF x0 is mf3 and x1 is mf3 THEN y0 = +0.17 x0 +0.17 x1 +0.38


In [44]: y = anfis.predict(anf, X[-1:])
---------- Input: (2,)
[10. 10.]
---------- Layer 1: (2, 4)
x0: [0.001644162097147174, 0.05237133070712772, 0.265827368743621, 0.9999988690238243]
x1: [0.0016441620971604615, 0.05237133070290469, 0.26582736874996415, 0.9999988690238243]
---------- Layer 2: (16,)
[2.70326900e-06 8.61069569e-05 4.37063284e-04 1.64416024e-03
 8.61069569e-05 2.74275628e-03 1.39217330e-02 5.23712715e-02
 4.37063284e-04 1.39217330e-02 7.06641900e-02 2.65827068e-01
 1.64416024e-03 5.23712715e-02 2.65827068e-01 9.99997738e-01]
---------- Layer 3: (16,)
[1.55183504e-06 4.94304461e-05 2.50899972e-04 9.43844457e-04
 4.94304461e-05 1.57450305e-03 7.99189170e-03 3.00641830e-02
 2.50899972e-04 7.99189170e-03 4.05653917e-02 1.52600336e-01
 9.43844457e-04 3.00641830e-02 1.52600336e-01 5.74057382e-01]
---------- Layer 4: (16, 3)
[[1.55183504e-05 1.55183504e-05 1.55183504e-06]
 [4.94304461e-04 4.94304461e-04 4.94304461e-05]
 [2.50899972e-03 2.50899972e-03 2.50899972e-04]
 [9.43844457e-03 9.43844457e-03 9.43844457e-04]
 [4.94304461e-04 4.94304461e-04 4.94304461e-05]
 [1.57450305e-02 1.57450305e-02 1.57450305e-03]
 [7.99189170e-02 7.99189170e-02 7.99189170e-03]
 [3.00641830e-01 3.00641830e-01 3.00641830e-02]
 [2.50899972e-03 2.50899972e-03 2.50899972e-04]
 [7.99189170e-02 7.99189170e-02 7.99189170e-03]
 [4.05653917e-01 4.05653917e-01 4.05653917e-02]
 [1.52600336e+00 1.52600336e+00 1.52600336e-01]
 [9.43844457e-03 9.43844457e-03 9.43844457e-04]
 [3.00641830e-01 3.00641830e-01 3.00641830e-02]
 [1.52600336e+00 1.52600336e+00 1.52600336e-01]
 [5.74057382e+00 5.74057382e+00 5.74057382e-01]]
---------- Layer 5: (1, 1)
[[-0.01070478]]


In [51]: y = anfis.predict(anf, np.array([[1,1]]))
---------- Input: (2,)
[1 1]
---------- Layer 1: (2, 4)
x0: [0.01874021464515909, 0.31696022013605524, 0.5655072931670447, 0.041815325299904525]
x1: [0.018740214645240935, 0.3169602201302361, 0.5655072931668842, 0.041815325299821446]
---------- Layer 2: (16,)
[0.0003512  0.0059399  0.01059773 0.00078363 0.0059399  0.10046378
 0.17924332 0.01325379 0.01059773 0.17924332 0.3197985  0.02364687
 0.00078363 0.01325379 0.02364687 0.00174852]
---------- Layer 3: (16,)
[0.00039492 0.00667936 0.01191703 0.00088118 0.00667936 0.11297046
 0.20155722 0.01490375 0.01191703 0.20155722 0.35961003 0.02659066
 0.00088118 0.01490375 0.02659066 0.00196619]
---------- Layer 4: (16, 3)
[[0.00039492 0.00039492 0.00039492]
 [0.00667936 0.00667936 0.00667936]
 [0.01191703 0.01191703 0.01191703]
 [0.00088118 0.00088118 0.00088118]
 [0.00667936 0.00667936 0.00667936]
 [0.11297046 0.11297046 0.11297046]
 [0.20155722 0.20155722 0.20155722]
 [0.01490375 0.01490375 0.01490375]
 [0.01191703 0.01191703 0.01191703]
 [0.20155722 0.20155722 0.20155722]
 [0.35961003 0.35961003 0.35961003]
 [0.02659066 0.02659066 0.02659066]
 [0.00088118 0.00088118 0.00088118]
 [0.01490375 0.01490375 0.01490375]
 [0.02659066 0.02659066 0.02659066]
 [0.00196619 0.00196619 0.00196619]]
---------- Layer 5: (1, 1)
[[0.39811771]]
